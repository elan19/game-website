{"ast":null,"code":"var AddonExecutionStatus;\n(function (AddonExecutionStatus) {\n  AddonExecutionStatus[\"IN_PROGRESS\"] = \"in_progress\";\n  AddonExecutionStatus[\"ERROR\"] = \"error\";\n  AddonExecutionStatus[\"DONE\"] = \"done\";\n  AddonExecutionStatus[\"UNKNOWN\"] = \"unknown\";\n})(AddonExecutionStatus || (AddonExecutionStatus = {}));\nvar AddonName;\n(function (AddonName) {\n  AddonName[\"UC_CLAMAV_VIRUS_SCAN\"] = \"uc_clamav_virus_scan\";\n  AddonName[\"AWS_REKOGNITION_DETECT_LABELS\"] = \"aws_rekognition_detect_labels\";\n  AddonName[\"AWS_REKOGNITION_DETECT_MODERATION_LABELS\"] = \"aws_rekognition_detect_moderation_labels\";\n  AddonName[\"REMOVE_BG\"] = \"remove_bg\";\n})(AddonName || (AddonName = {}));\nvar BatchResponseStatus;\n(function (BatchResponseStatus) {\n  BatchResponseStatus[\"OK\"] = \"ok\";\n})(BatchResponseStatus || (BatchResponseStatus = {}));\nvar ConversionStatus;\n(function (ConversionStatus) {\n  ConversionStatus[\"PENDING\"] = \"pending\";\n  ConversionStatus[\"PROCESSING\"] = \"processing\";\n  ConversionStatus[\"FINISHED\"] = \"finished\";\n  ConversionStatus[\"FAILED\"] = \"failed\";\n  ConversionStatus[\"CANCELLED\"] = \"cancelled\";\n})(ConversionStatus || (ConversionStatus = {}));\nvar WebhookEvent;\n(function (WebhookEvent) {\n  WebhookEvent[\"FILE_UPLOADED\"] = \"file.uploaded\";\n})(WebhookEvent || (WebhookEvent = {}));\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\nconst SEPARATOR = /\\W|_/g;\nfunction camelizeString(text) {\n  return text.split(SEPARATOR).map((word, index) => word.charAt(0)[index > 0 ? 'toUpperCase' : 'toLowerCase']() + word.slice(1)).join('');\n}\nfunction camelizeArrayItems(array, {\n  ignoreKeys\n} = {\n  ignoreKeys: []\n}) {\n  if (!Array.isArray(array)) {\n    return array;\n  }\n  return array.map(item => camelizeKeys(item, {\n    ignoreKeys\n  }));\n}\nfunction camelizeKeys(source, {\n  ignoreKeys\n} = {\n  ignoreKeys: []\n}) {\n  if (Array.isArray(source)) {\n    return camelizeArrayItems(source, {\n      ignoreKeys\n    });\n  }\n  if (!isObject(source)) {\n    return source;\n  }\n  const result = {};\n  for (const key of Object.keys(source)) {\n    let value = source[key];\n    if (ignoreKeys.includes(key)) {\n      result[key] = value;\n      continue;\n    }\n    if (isObject(value)) {\n      value = camelizeKeys(value, {\n        ignoreKeys\n      });\n    } else if (Array.isArray(value)) {\n      value = camelizeArrayItems(value, {\n        ignoreKeys\n      });\n    }\n    result[camelizeString(key)] = value;\n  }\n  return result;\n}\n\n/**\n * SetTimeout as Promise.\n *\n * @param {number} ms Timeout in milliseconds.\n */\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nfunction getUserAgent$1({\n  libraryName,\n  libraryVersion,\n  userAgent,\n  publicKey = '',\n  integration = ''\n}) {\n  const languageName = 'JavaScript';\n  if (typeof userAgent === 'string') {\n    return userAgent;\n  }\n  if (typeof userAgent === 'function') {\n    return userAgent({\n      publicKey,\n      libraryName,\n      libraryVersion,\n      languageName,\n      integration\n    });\n  }\n  const mainInfo = [libraryName, libraryVersion, publicKey].filter(Boolean).join('/');\n  const additionInfo = [languageName, integration].filter(Boolean).join('; ');\n  return `${mainInfo} (${additionInfo})`;\n}\nconst isNode = () => {\n  try {\n    return Object.prototype.toString.call(global.process) === '[object process]';\n  } catch (e) {\n    return false;\n  }\n};\nconst defaultOptions = {\n  factor: 2,\n  time: 100\n};\nfunction retrier(fn, options = defaultOptions) {\n  let attempts = 0;\n  function runAttempt(fn) {\n    const defaultDelayTime = Math.round(options.time * options.factor ** attempts);\n    const retry = ms => delay(ms ?? defaultDelayTime).then(() => {\n      attempts += 1;\n      return runAttempt(fn);\n    });\n    return fn({\n      attempt: attempts,\n      retry\n    });\n  }\n  return runAttempt(fn);\n}\nclass UploadcareError extends Error {}\nconst onCancel = (signal, callback) => {\n  if (signal) {\n    if (signal.aborted) {\n      Promise.resolve().then(callback);\n    } else {\n      signal.addEventListener('abort', () => callback(), {\n        once: true\n      });\n    }\n  }\n};\nclass CancelError extends UploadcareError {\n  isCancel = true;\n  constructor(message = 'Request canceled') {\n    super(message);\n    this.name = 'CancelError';\n    Object.setPrototypeOf(this, CancelError.prototype);\n  }\n}\nconst DEFAULT_INTERVAL = 500;\nconst poll = ({\n  check,\n  interval = DEFAULT_INTERVAL,\n  timeout,\n  signal\n}) => new Promise((resolve, reject) => {\n  let tickTimeoutId;\n  let timeoutId;\n  onCancel(signal, () => {\n    tickTimeoutId && clearTimeout(tickTimeoutId);\n    reject(new CancelError('Poll cancelled'));\n  });\n  if (timeout) {\n    timeoutId = setTimeout(() => {\n      tickTimeoutId && clearTimeout(tickTimeoutId);\n      reject(new CancelError('Timed out'));\n    }, timeout);\n  }\n  const tick = () => {\n    try {\n      Promise.resolve(check(signal)).then(result => {\n        if (result) {\n          timeoutId && clearTimeout(timeoutId);\n          resolve(result);\n        } else {\n          tickTimeoutId = setTimeout(tick, interval);\n        }\n      }).catch(error => {\n        timeoutId && clearTimeout(timeoutId);\n        reject(error);\n      });\n    } catch (error) {\n      timeoutId && clearTimeout(timeoutId);\n      reject(error);\n    }\n  };\n  tickTimeoutId = setTimeout(tick, 0);\n});\nvar ConversionType;\n(function (ConversionType) {\n  ConversionType[\"VIDEO\"] = \"video\";\n  ConversionType[\"DOCUMENT\"] = \"document\";\n})(ConversionType || (ConversionType = {}));\nconst DEFAULT_MESSAGE = 'Unknown error';\n/**\n * TODO: it's better to split errors into something like Runtime error and\n * ServerError (RestApiError)\n */\nclass RestClientError extends UploadcareError {\n  status;\n  statusText;\n  request;\n  response;\n  constructor(message, options = {}) {\n    super();\n    this.name = 'RestClientError';\n    this.request = options.request;\n    this.response = options.response;\n    this.status = options.response?.status;\n    this.statusText = options.response?.statusText;\n    const msg = message ?? this.statusText ?? DEFAULT_MESSAGE;\n    const status = this.status || this.statusText ? `[${[this.status, msg === this.statusText ? '' : this.statusText].filter(Boolean).join(' ')}] ` : '';\n    this.message = status + msg;\n    Object.setPrototypeOf(this, RestClientError.prototype);\n  }\n}\nfunction constructPageOptions(pageUrl, options) {\n  const url = new URL(pageUrl);\n  const searchParams = Object.fromEntries(url.searchParams);\n  const pageOptions = {\n    ...options,\n    ...searchParams\n  };\n  return pageOptions;\n}\nclass Paginator {\n  _paginatable;\n  _options;\n  _settings;\n  _page = null;\n  constructor(paginatable, options, settings) {\n    this._paginatable = paginatable;\n    this._options = options;\n    this._settings = settings;\n  }\n  updateOptions(options) {\n    this._options = {\n      ...this._options,\n      ...options\n    };\n    this._page = null;\n  }\n  hasNextPage() {\n    return !this._page || !!this._page.next;\n  }\n  hasPrevPage() {\n    return !!this._page && !!this._page.previous;\n  }\n  getCurrentPage() {\n    return this._page;\n  }\n  async next() {\n    if (!this._page) {\n      this._page = await this._paginatable(this._options, this._settings);\n      return this._page;\n    }\n    if (!this._page.next) {\n      return null;\n    }\n    const pageOptions = constructPageOptions(this._page.next, this._options);\n    this._page = await this._paginatable(pageOptions, this._settings);\n    return this._page;\n  }\n  async prev() {\n    if (!this._page || !this._page.previous) {\n      return null;\n    }\n    const pageOptions = constructPageOptions(this._page.previous, this._options);\n    this._page = await this._paginatable(pageOptions, this._settings);\n    return this._page;\n  }\n  generator() {\n    return paginate(this._paginatable)(this._options, this._settings);\n  }\n}\nfunction paginate(paginatable) {\n  return async function* (options, settings) {\n    let page = await paginatable(options, settings);\n    yield page;\n    while (page.next) {\n      const pageOptions = constructPageOptions(page.next, options);\n      page = await paginatable(pageOptions, settings);\n      yield page;\n    }\n  };\n}\nconst fetch = window.fetch;\nconst Headers = window.Headers;\nconst Request = window.Request;\nconst defaultSettings = {\n  apiBaseURL: 'https://api.uploadcare.com/',\n  retryThrottledRequestMaxTimes: 5,\n  retryNetworkErrorMaxTimes: 3\n};\nconst applyDefaultSettings = userSettings => {\n  const settings = {\n    ...defaultSettings,\n    ...userSettings\n  };\n  return settings;\n};\nvar version = '6.14.1';\nconst LIBRARY_NAME = 'UploadcareRestClient';\nconst LIBRARY_VERSION = version;\nfunction getUserAgent(options) {\n  return getUserAgent$1({\n    libraryName: LIBRARY_NAME,\n    libraryVersion: LIBRARY_VERSION,\n    ...options\n  });\n}\nconst THROTTLED_STATUS = 429;\nconst DEFAULT_RETRY_AFTER_TIMEOUT = 15000;\nconst DEFAULT_NETWORK_ERROR_TIMEOUT = 1000;\nfunction getTimeoutFromThrottledRequest(response) {\n  const {\n    headers\n  } = response;\n  if (!headers || !headers.get('retry-after')) {\n    return DEFAULT_RETRY_AFTER_TIMEOUT;\n  }\n  const seconds = parseInt(headers.get('retry-after'), 10);\n  if (!Number.isFinite(seconds)) {\n    return DEFAULT_RETRY_AFTER_TIMEOUT;\n  }\n  return seconds * 1000;\n}\nfunction retryIfFailed(fn, options) {\n  return retrier(({\n    attempt,\n    retry\n  }) => fn().then(async response => {\n    if (response.status !== THROTTLED_STATUS) {\n      return response;\n    }\n    if (attempt < options.retryThrottledRequestMaxTimes) {\n      return retry(getTimeoutFromThrottledRequest(response));\n    }\n    const json = await response.json();\n    const {\n      detail\n    } = json;\n    throw new RestClientError(detail, {\n      response\n    });\n  }).catch(error => {\n    if (attempt < options.retryNetworkErrorMaxTimes) {\n      return retry((attempt + 1) * DEFAULT_NETWORK_ERROR_TIMEOUT);\n    }\n    throw error;\n  }));\n}\nfunction normalizeQuery(input) {\n  const output = {};\n  for (const [key, value] of Object.entries(input)) {\n    if (value === undefined || value === null) {\n      continue;\n    }\n    if (value instanceof Date) {\n      output[key] = value.toISOString();\n    } else {\n      output[key] = value.toString();\n    }\n  }\n  return output;\n}\nfunction getRequestURL(path, query, apiBaseURL) {\n  const url = new URL(apiBaseURL);\n  const searchParams = new URLSearchParams(query && normalizeQuery(query));\n  url.pathname = path;\n  url.search = searchParams.toString();\n  return url.toString();\n}\nasync function makeApiRequest(options, userSettings) {\n  const {\n    method,\n    path,\n    query,\n    body\n  } = options;\n  const settings = applyDefaultSettings(userSettings);\n  if (!settings.authSchema) {\n    throw new RestClientError('authSchema is required');\n  }\n  const url = getRequestURL(path, query, settings.apiBaseURL);\n  const requestBody = body && JSON.stringify(body);\n  const unsignedRequest = new Request(url, {\n    method: method,\n    body: requestBody,\n    headers: new Headers({\n      'Content-Type': 'application/json',\n      'User-Agent': getUserAgent({\n        publicKey: settings.authSchema.publicKey,\n        integration: settings.integration,\n        userAgent: settings.userAgent\n      })\n    })\n  });\n  const requestHeaders = await settings.authSchema.getHeaders(unsignedRequest);\n  const signedRequest = new Request(url, {\n    method: method,\n    body: requestBody,\n    headers: requestHeaders\n  });\n  const response = await retryIfFailed(() => fetch(signedRequest), {\n    retryThrottledRequestMaxTimes: settings.retryThrottledRequestMaxTimes,\n    retryNetworkErrorMaxTimes: settings.retryNetworkErrorMaxTimes\n  });\n  return {\n    request: signedRequest,\n    response\n  };\n}\nconst DEFAULT_API_VERSION = '0.7';\nconst getAcceptHeader = () => {\n  return `application/vnd.uploadcare-v${DEFAULT_API_VERSION}+json`;\n};\nconst CAMELIZE_IGNORE_KEYS = ['metadata', 'problems', 'appdata'];\nconst NO_CONTENT_STATUS = 204;\nconst isJsonContentType = type => type && ['application/json', getAcceptHeader()].includes(type);\nasync function handleApiRequest(options) {\n  const {\n    apiRequest,\n    okCodes,\n    camelize = true\n  } = options;\n  const {\n    request,\n    response\n  } = apiRequest;\n  if (response.status === NO_CONTENT_STATUS) {\n    return undefined;\n  }\n  if (!isJsonContentType(response.headers.get('content-type'))) {\n    throw new RestClientError(undefined, {\n      response,\n      request\n    });\n  }\n  const json = await response.json();\n  if (!okCodes.includes(response.status)) {\n    throw new RestClientError(json.detail, {\n      response,\n      request\n    });\n  }\n  if (!camelize) {\n    return json;\n  }\n  return camelizeKeys(json, {\n    ignoreKeys: CAMELIZE_IGNORE_KEYS\n  });\n}\nasync function addonExecutionStatus(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'GET',\n    path: `/addons/${options.addonName}/execute/status/`,\n    query: {\n      request_id: options.requestId\n    }\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nasync function executeAddon(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'POST',\n    path: `/addons/${options.addonName}/execute/`,\n    body: {\n      target: options.target,\n      params: options.params\n    }\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nasync function fileInfo(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'GET',\n    path: `/files/${options.uuid}/`,\n    query: {\n      include: options.include\n    }\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nvar PollStrategyJobStatus;\n(function (PollStrategyJobStatus) {\n  PollStrategyJobStatus[PollStrategyJobStatus[\"FINISHED\"] = 0] = \"FINISHED\";\n  PollStrategyJobStatus[PollStrategyJobStatus[\"FAILED\"] = 1] = \"FAILED\";\n})(PollStrategyJobStatus || (PollStrategyJobStatus = {}));\nfunction createPollStrategy({\n  getJobStatus,\n  job,\n  isJobFailed,\n  isJobFinished\n}) {\n  return async () => {\n    const statusResponse = await getJobStatus(job);\n    if (isJobFinished(statusResponse)) {\n      return {\n        status: PollStrategyJobStatus.FINISHED,\n        statusResponse\n      };\n    } else if (isJobFailed(statusResponse)) {\n      return {\n        status: PollStrategyJobStatus.FAILED,\n        statusResponse\n      };\n    }\n    return false;\n  };\n}\nfunction createJobPoller(options) {\n  const {\n    runner,\n    resolveJobs,\n    getJobStatus,\n    isJobFinished,\n    isJobFailed,\n    getResult,\n    getError\n  } = options;\n  return async (options, runnerSettings) => {\n    // TODO: add default timeout and inerval\n    const {\n      pollOptions,\n      ...runnerOptions\n    } = options;\n    const response = await runner(runnerOptions, runnerSettings);\n    const jobs = resolveJobs(response, runnerOptions, runnerSettings);\n    if (pollOptions?.signal?.aborted) {\n      throw new CancelError();\n    }\n    const promises = jobs.map(async job => {\n      const pollStrategy = createPollStrategy({\n        getJobStatus,\n        job,\n        isJobFailed,\n        isJobFinished\n      });\n      const pollResult = await poll({\n        check: pollStrategy,\n        signal: pollOptions?.signal,\n        interval: pollOptions?.interval,\n        timeout: pollOptions?.timeout\n      });\n      if (pollResult.status === PollStrategyJobStatus.FINISHED) {\n        const result = await getResult(job, pollResult.statusResponse);\n        return result;\n      }\n      const error = await getError(job, pollResult.statusResponse);\n      return error;\n    });\n    return promises;\n  };\n}\nconst addonJobPoller = async (options, settings) => {\n  const {\n    onRun,\n    onStatus,\n    ...pollerOptions\n  } = options;\n  const poller = createJobPoller({\n    runner: executeAddon,\n    resolveJobs: (response, runnerOptions, runnerSettings) => {\n      onRun && onRun(response);\n      return [{\n        target: runnerOptions.target,\n        requestId: response.requestId,\n        addonName: runnerOptions.addonName,\n        runnerSettings\n      }];\n    },\n    getJobStatus: async job => {\n      const response = await addonExecutionStatus({\n        addonName: job.addonName,\n        requestId: job.requestId\n      }, job.runnerSettings);\n      onStatus && onStatus(response);\n      return response;\n    },\n    isJobFinished: statusResponse => statusResponse.status === AddonExecutionStatus.DONE,\n    // TODO: handle unknown status\n    isJobFailed: statusResponse => statusResponse.status === AddonExecutionStatus.ERROR,\n    getResult: async job => {\n      const info = await fileInfo({\n        uuid: job.target,\n        include: 'appdata'\n      }, job.runnerSettings);\n      const appdata = info.appdata;\n      const addonData = appdata[job.addonName];\n      return {\n        error: false,\n        result: addonData\n      };\n    },\n    getError: async () => ({\n      error: true,\n      result: null\n    })\n  });\n  const promises = await poller(pollerOptions, settings);\n  return promises[0];\n};\nasync function conversionJobStatus(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'GET',\n    path: `/convert/${options.type}/status/${options.token}/`\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nconst storeValueToString = store => {\n  if (typeof store === 'boolean') {\n    return store ? 'true' : 'false';\n  }\n  if (!store || store === 'auto') {\n    return undefined;\n  }\n  throw new RestClientError('Invalid `store` option value. Expected `true`, `false` our `\"auto\"`');\n};\nasync function convert(options, userSettings) {\n  const isDocument = options.type === ConversionType.DOCUMENT;\n  const body = {\n    paths: options.paths,\n    store: storeValueToString(options.store)\n  };\n  if (isDocument) {\n    body['save_in_group'] = options?.saveInGroup?.toString();\n  }\n  const apiRequest = await makeApiRequest({\n    method: 'POST',\n    path: `/convert/${options.type}/`,\n    body\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nconst conversionJobPoller = (options, settings) => {\n  const {\n    onRun,\n    onStatus,\n    ...rest\n  } = options;\n  const pollerOptions = rest;\n  const poller = createJobPoller({\n    runner: convert,\n    resolveJobs: (response, runnerOptions, runnerSettings) => {\n      onRun && onRun(response);\n      return runnerOptions.paths.map(path => {\n        const problem = response.problems[path];\n        if (problem) {\n          return {\n            hasProblem: true,\n            type: runnerOptions.type,\n            path,\n            problem,\n            runnerSettings\n          };\n        }\n        const result = response.result.find(r => r.originalSource === path);\n        return {\n          hasProblem: false,\n          type: runnerOptions.type,\n          path,\n          token: result.token,\n          result,\n          runnerSettings\n        };\n      });\n    },\n    getJobStatus: async job => {\n      let status;\n      if (job.hasProblem) {\n        status = {\n          path: job.path,\n          status: ConversionStatus.FAILED,\n          error: job.problem,\n          result: null\n        };\n      } else {\n        const statusResponse = await conversionJobStatus({\n          type: job.type,\n          token: job.token\n        }, job.runnerSettings);\n        status = {\n          path: job.path,\n          ...statusResponse\n        };\n      }\n      onStatus && onStatus(status);\n      return status;\n    },\n    isJobFinished: statusResponse => statusResponse.status === ConversionStatus.FINISHED,\n    isJobFailed: statusResponse => statusResponse.status === ConversionStatus.FAILED || statusResponse.status === ConversionStatus.CANCELLED,\n    getResult: async (job, statusResponse) => statusResponse,\n    getError: async (job, statusResponse) => statusResponse\n  });\n  return poller(pollerOptions, settings);\n};\nconst createSignature = (...args) => {\n  return import('./createSignature.browser.b4bcb7f3.mjs').then(m => m.createSignature(...args));\n};\nfunction hasSignatureResolver(options) {\n  return !!options.signatureResolver;\n}\nfunction hasSecretKey(options) {\n  return !!options.secretKey;\n}\nclass UploadcareAuthSchema {\n  _publicKey;\n  _signatureResolver;\n  _md5Loader;\n  constructor(options) {\n    if (hasSecretKey(options)) {\n      if (!isNode()) {\n        console.warn(`Seems that you're using the secret key on the client-side. We're hope you know what you're doing.`);\n      }\n      this._signatureResolver = signString => createSignature(options.secretKey, signString);\n    } else if (hasSignatureResolver(options)) {\n      this._signatureResolver = options.signatureResolver;\n    } else {\n      throw new RestClientError(`Please, provide either 'secretKey' or 'signatureResolver'`);\n    }\n    const {\n      publicKey,\n      md5Loader\n    } = options;\n    this._publicKey = publicKey;\n    if (md5Loader) {\n      this._md5Loader = md5Loader();\n    } else {\n      this._md5Loader = import('./md5.browser.c389165d.mjs').then(m => m.md5);\n    }\n  }\n  async md5(input) {\n    const md5 = await this._md5Loader;\n    return md5(input);\n  }\n  getSignString(params) {\n    return [params.method, params.contentHash, params.contentType, params.date, params.uri].join('\\n');\n  }\n  get publicKey() {\n    return this._publicKey;\n  }\n  async getHeaders(request) {\n    const body = await request.text();\n    const contentHash = await this.md5(body || '');\n    const date = new Date().toUTCString();\n    const url = new URL(request.url);\n    const uri = url.pathname + url.search + url.hash;\n    const signString = this.getSignString({\n      contentType: request.headers.get('Content-Type') || '',\n      method: request.method,\n      contentHash,\n      date,\n      uri\n    });\n    const signature = await this._signatureResolver(signString);\n    const headers = new Headers({\n      ...Object.fromEntries(request.headers.entries()),\n      'X-Uploadcare-Date': date,\n      Accept: getAcceptHeader(),\n      Authorization: `Uploadcare ${this._publicKey}:${signature}`\n    });\n    return headers;\n  }\n}\nclass UploadcareSimpleAuthSchema {\n  _publicKey;\n  _secretKey;\n  constructor({\n    publicKey,\n    secretKey\n  }) {\n    this._publicKey = publicKey;\n    this._secretKey = secretKey;\n    if (secretKey && !isNode()) {\n      console.warn(`Seems that you're using the secret key on the client-side. We're hope you know that you're doing.`);\n    }\n  }\n  get publicKey() {\n    return this._publicKey;\n  }\n  async getHeaders(request) {\n    return new Headers({\n      ...Object.fromEntries(request.headers.entries()),\n      Accept: getAcceptHeader(),\n      Authorization: `Uploadcare.Simple ${this._publicKey}:${this._secretKey}`\n    });\n  }\n}\nasync function copyFileToLocalStorage(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'POST',\n    path: `/files/local_copy/`,\n    body: {\n      source: options.source,\n      store: options.store,\n      metadata: options.metadata\n    }\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [201]\n  });\n}\nasync function copyFileToRemoteStorage(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'POST',\n    path: `/files/remote_copy/`,\n    body: {\n      source: options.source,\n      target: options.target,\n      make_public: options.makePublic,\n      pattern: options.pattern\n    }\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200, 201]\n  });\n}\nasync function deleteFile(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'DELETE',\n    path: `/files/${options.uuid}/storage/`\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nasync function deleteFiles(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'DELETE',\n    path: `/files/storage/`,\n    body: options.uuids\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nasync function listOfFiles(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'GET',\n    path: '/files/',\n    query: {\n      from: options.from,\n      removed: options.removed,\n      stored: options.stored,\n      limit: options.limit,\n      ordering: options.ordering\n    }\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nasync function storeFile(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'PUT',\n    path: `/files/${options.uuid}/storage/`\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nasync function storeFiles(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'PUT',\n    path: `/files/storage/`,\n    body: options.uuids\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nasync function deleteGroup(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'DELETE',\n    path: `/groups/${options.uuid}/`\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [204]\n  });\n}\nasync function groupInfo(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'GET',\n    path: `/groups/${options.uuid}/`\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nasync function listOfGroups(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'GET',\n    path: '/groups/',\n    query: {\n      from: options.from,\n      limit: options.limit,\n      ordering: options.ordering\n    }\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nasync function deleteMetadata(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'DELETE',\n    path: `/files/${options.uuid}/metadata/${options.key}/`\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [204]\n  });\n}\nasync function getMetadata(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'GET',\n    path: `/files/${options.uuid}/metadata/`\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200],\n    camelize: false\n  });\n}\nasync function getMetadataValue(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'GET',\n    path: `/files/${options.uuid}/metadata/${options.key}/`\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nasync function updateMetadata(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'PUT',\n    path: `/files/${options.uuid}/metadata/${options.key}/`,\n    body: options.value\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200, 201]\n  });\n}\nasync function createWebhook(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'POST',\n    path: `/webhooks/`,\n    body: {\n      target_url: options.targetUrl,\n      event: options.event,\n      is_active: options.isActive,\n      signing_secret: options.signingSecret\n    }\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [201]\n  });\n}\nasync function deleteWebhook(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'DELETE',\n    path: `/webhooks/unsubscribe/`,\n    body: {\n      target_url: options.targetUrl\n    }\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [204]\n  });\n}\nasync function listOfWebhooks(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'GET',\n    path: `/webhooks/`\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nasync function updateWebhook(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'PUT',\n    path: `/webhooks/${options.id}/`,\n    body: {\n      target_url: options.targetUrl,\n      event: options.event,\n      is_active: options.isActive,\n      signing_secret: options.signingSecret\n    }\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nasync function conversionInfo(options, userSettings) {\n  const apiRequest = await makeApiRequest({\n    method: 'GET',\n    path: `/convert/document/${options.uuid}/`\n  }, userSettings);\n  return handleApiRequest({\n    apiRequest,\n    okCodes: [200]\n  });\n}\nexport { AddonExecutionStatus, AddonName, BatchResponseStatus, CancelError, ConversionStatus, ConversionType, Paginator, RestClientError, UploadcareAuthSchema, UploadcareError, UploadcareSimpleAuthSchema, WebhookEvent, addonExecutionStatus, addonJobPoller, conversionInfo, conversionJobPoller, conversionJobStatus, convert, copyFileToLocalStorage, copyFileToRemoteStorage, createSignature, createWebhook, deleteFile, deleteFiles, deleteGroup, deleteMetadata, deleteWebhook, executeAddon, fileInfo, getMetadata, getMetadataValue, getUserAgent$1 as getUserAgent, groupInfo, listOfFiles, listOfGroups, listOfWebhooks, paginate, storeFile, storeFiles, updateMetadata, updateWebhook };","map":{"version":3,"names":["AddonExecutionStatus","AddonName","BatchResponseStatus","ConversionStatus","WebhookEvent","isObject","o","Object","prototype","toString","call","SEPARATOR","camelizeString","text","split","map","word","index","charAt","slice","join","camelizeArrayItems","array","ignoreKeys","Array","isArray","item","camelizeKeys","source","result","key","keys","value","includes","delay","ms","Promise","resolve","setTimeout","getUserAgent$1","libraryName","libraryVersion","userAgent","publicKey","integration","languageName","mainInfo","filter","Boolean","additionInfo","isNode","global","process","e","defaultOptions","factor","time","retrier","fn","options","attempts","runAttempt","defaultDelayTime","Math","round","retry","then","attempt","UploadcareError","Error","onCancel","signal","callback","aborted","addEventListener","once","CancelError","isCancel","constructor","message","name","setPrototypeOf","DEFAULT_INTERVAL","poll","check","interval","timeout","reject","tickTimeoutId","timeoutId","clearTimeout","tick","catch","error","ConversionType","DEFAULT_MESSAGE","RestClientError","status","statusText","request","response","msg","constructPageOptions","pageUrl","url","URL","searchParams","fromEntries","pageOptions","Paginator","_paginatable","_options","_settings","_page","paginatable","settings","updateOptions","hasNextPage","next","hasPrevPage","previous","getCurrentPage","prev","generator","paginate","page","fetch","window","Headers","Request","defaultSettings","apiBaseURL","retryThrottledRequestMaxTimes","retryNetworkErrorMaxTimes","applyDefaultSettings","userSettings","version","LIBRARY_NAME","LIBRARY_VERSION","getUserAgent","THROTTLED_STATUS","DEFAULT_RETRY_AFTER_TIMEOUT","DEFAULT_NETWORK_ERROR_TIMEOUT","getTimeoutFromThrottledRequest","headers","get","seconds","parseInt","Number","isFinite","retryIfFailed","json","detail","normalizeQuery","input","output","entries","undefined","Date","toISOString","getRequestURL","path","query","URLSearchParams","pathname","search","makeApiRequest","method","body","authSchema","requestBody","JSON","stringify","unsignedRequest","requestHeaders","getHeaders","signedRequest","DEFAULT_API_VERSION","getAcceptHeader","CAMELIZE_IGNORE_KEYS","NO_CONTENT_STATUS","isJsonContentType","type","handleApiRequest","apiRequest","okCodes","camelize","addonExecutionStatus","addonName","request_id","requestId","executeAddon","target","params","fileInfo","uuid","include","PollStrategyJobStatus","createPollStrategy","getJobStatus","job","isJobFailed","isJobFinished","statusResponse","FINISHED","FAILED","createJobPoller","runner","resolveJobs","getResult","getError","runnerSettings","pollOptions","runnerOptions","jobs","promises","pollStrategy","pollResult","addonJobPoller","onRun","onStatus","pollerOptions","poller","DONE","ERROR","info","appdata","addonData","conversionJobStatus","token","storeValueToString","store","convert","isDocument","DOCUMENT","paths","saveInGroup","conversionJobPoller","rest","problem","problems","hasProblem","find","r","originalSource","CANCELLED","createSignature","args","m","hasSignatureResolver","signatureResolver","hasSecretKey","secretKey","UploadcareAuthSchema","_publicKey","_signatureResolver","_md5Loader","console","warn","signString","md5Loader","md5","getSignString","contentHash","contentType","date","uri","toUTCString","hash","signature","Accept","Authorization","UploadcareSimpleAuthSchema","_secretKey","copyFileToLocalStorage","metadata","copyFileToRemoteStorage","make_public","makePublic","pattern","deleteFile","deleteFiles","uuids","listOfFiles","from","removed","stored","limit","ordering","storeFile","storeFiles","deleteGroup","groupInfo","listOfGroups","deleteMetadata","getMetadata","getMetadataValue","updateMetadata","createWebhook","target_url","targetUrl","event","is_active","isActive","signing_secret","signingSecret","deleteWebhook","listOfWebhooks","updateWebhook","id","conversionInfo"],"sources":["/home/elias/self-projects/game-platform-website/node_modules/@uploadcare/rest-client/dist/esm/index.browser.mjs"],"sourcesContent":["var AddonExecutionStatus;\n(function (AddonExecutionStatus) {\n    AddonExecutionStatus[\"IN_PROGRESS\"] = \"in_progress\";\n    AddonExecutionStatus[\"ERROR\"] = \"error\";\n    AddonExecutionStatus[\"DONE\"] = \"done\";\n    AddonExecutionStatus[\"UNKNOWN\"] = \"unknown\";\n})(AddonExecutionStatus || (AddonExecutionStatus = {}));\n\nvar AddonName;\n(function (AddonName) {\n    AddonName[\"UC_CLAMAV_VIRUS_SCAN\"] = \"uc_clamav_virus_scan\";\n    AddonName[\"AWS_REKOGNITION_DETECT_LABELS\"] = \"aws_rekognition_detect_labels\";\n    AddonName[\"AWS_REKOGNITION_DETECT_MODERATION_LABELS\"] = \"aws_rekognition_detect_moderation_labels\";\n    AddonName[\"REMOVE_BG\"] = \"remove_bg\";\n})(AddonName || (AddonName = {}));\n\nvar BatchResponseStatus;\n(function (BatchResponseStatus) {\n    BatchResponseStatus[\"OK\"] = \"ok\";\n})(BatchResponseStatus || (BatchResponseStatus = {}));\n\nvar ConversionStatus;\n(function (ConversionStatus) {\n    ConversionStatus[\"PENDING\"] = \"pending\";\n    ConversionStatus[\"PROCESSING\"] = \"processing\";\n    ConversionStatus[\"FINISHED\"] = \"finished\";\n    ConversionStatus[\"FAILED\"] = \"failed\";\n    ConversionStatus[\"CANCELLED\"] = \"cancelled\";\n})(ConversionStatus || (ConversionStatus = {}));\n\nvar WebhookEvent;\n(function (WebhookEvent) {\n    WebhookEvent[\"FILE_UPLOADED\"] = \"file.uploaded\";\n})(WebhookEvent || (WebhookEvent = {}));\n\nfunction isObject(o) {\n    return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nconst SEPARATOR = /\\W|_/g;\nfunction camelizeString(text) {\n    return text\n        .split(SEPARATOR)\n        .map((word, index) => word.charAt(0)[index > 0 ? 'toUpperCase' : 'toLowerCase']() +\n        word.slice(1))\n        .join('');\n}\nfunction camelizeArrayItems(array, { ignoreKeys } = { ignoreKeys: [] }) {\n    if (!Array.isArray(array)) {\n        return array;\n    }\n    return array.map((item) => camelizeKeys(item, { ignoreKeys }));\n}\nfunction camelizeKeys(source, { ignoreKeys } = { ignoreKeys: [] }) {\n    if (Array.isArray(source)) {\n        return camelizeArrayItems(source, { ignoreKeys });\n    }\n    if (!isObject(source)) {\n        return source;\n    }\n    const result = {};\n    for (const key of Object.keys(source)) {\n        let value = source[key];\n        if (ignoreKeys.includes(key)) {\n            result[key] = value;\n            continue;\n        }\n        if (isObject(value)) {\n            value = camelizeKeys(value, { ignoreKeys });\n        }\n        else if (Array.isArray(value)) {\n            value = camelizeArrayItems(value, { ignoreKeys });\n        }\n        result[camelizeString(key)] = value;\n    }\n    return result;\n}\n\n/**\n * SetTimeout as Promise.\n *\n * @param {number} ms Timeout in milliseconds.\n */\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nfunction getUserAgent$1({ libraryName, libraryVersion, userAgent, publicKey = '', integration = '' }) {\n    const languageName = 'JavaScript';\n    if (typeof userAgent === 'string') {\n        return userAgent;\n    }\n    if (typeof userAgent === 'function') {\n        return userAgent({\n            publicKey,\n            libraryName,\n            libraryVersion,\n            languageName,\n            integration\n        });\n    }\n    const mainInfo = [libraryName, libraryVersion, publicKey]\n        .filter(Boolean)\n        .join('/');\n    const additionInfo = [languageName, integration].filter(Boolean).join('; ');\n    return `${mainInfo} (${additionInfo})`;\n}\n\nconst isNode = () => {\n    try {\n        return Object.prototype.toString.call(global.process) === '[object process]';\n    }\n    catch (e) {\n        return false;\n    }\n};\n\nconst defaultOptions = {\n    factor: 2,\n    time: 100\n};\nfunction retrier(fn, options = defaultOptions) {\n    let attempts = 0;\n    function runAttempt(fn) {\n        const defaultDelayTime = Math.round(options.time * options.factor ** attempts);\n        const retry = (ms) => delay(ms ?? defaultDelayTime).then(() => {\n            attempts += 1;\n            return runAttempt(fn);\n        });\n        return fn({\n            attempt: attempts,\n            retry\n        });\n    }\n    return runAttempt(fn);\n}\n\nclass UploadcareError extends Error {\n}\n\nconst onCancel = (signal, callback) => {\n    if (signal) {\n        if (signal.aborted) {\n            Promise.resolve().then(callback);\n        }\n        else {\n            signal.addEventListener('abort', () => callback(), { once: true });\n        }\n    }\n};\n\nclass CancelError extends UploadcareError {\n    isCancel = true;\n    constructor(message = 'Request canceled') {\n        super(message);\n        this.name = 'CancelError';\n        Object.setPrototypeOf(this, CancelError.prototype);\n    }\n}\n\nconst DEFAULT_INTERVAL = 500;\nconst poll = ({ check, interval = DEFAULT_INTERVAL, timeout, signal }) => new Promise((resolve, reject) => {\n    let tickTimeoutId;\n    let timeoutId;\n    onCancel(signal, () => {\n        tickTimeoutId && clearTimeout(tickTimeoutId);\n        reject(new CancelError('Poll cancelled'));\n    });\n    if (timeout) {\n        timeoutId = setTimeout(() => {\n            tickTimeoutId && clearTimeout(tickTimeoutId);\n            reject(new CancelError('Timed out'));\n        }, timeout);\n    }\n    const tick = () => {\n        try {\n            Promise.resolve(check(signal))\n                .then((result) => {\n                if (result) {\n                    timeoutId && clearTimeout(timeoutId);\n                    resolve(result);\n                }\n                else {\n                    tickTimeoutId = setTimeout(tick, interval);\n                }\n            })\n                .catch((error) => {\n                timeoutId && clearTimeout(timeoutId);\n                reject(error);\n            });\n        }\n        catch (error) {\n            timeoutId && clearTimeout(timeoutId);\n            reject(error);\n        }\n    };\n    tickTimeoutId = setTimeout(tick, 0);\n});\n\nvar ConversionType;\n(function (ConversionType) {\n    ConversionType[\"VIDEO\"] = \"video\";\n    ConversionType[\"DOCUMENT\"] = \"document\";\n})(ConversionType || (ConversionType = {}));\n\nconst DEFAULT_MESSAGE = 'Unknown error';\n/**\n * TODO: it's better to split errors into something like Runtime error and\n * ServerError (RestApiError)\n */\nclass RestClientError extends UploadcareError {\n    status;\n    statusText;\n    request;\n    response;\n    constructor(message, options = {}) {\n        super();\n        this.name = 'RestClientError';\n        this.request = options.request;\n        this.response = options.response;\n        this.status = options.response?.status;\n        this.statusText = options.response?.statusText;\n        const msg = message ?? this.statusText ?? DEFAULT_MESSAGE;\n        const status = this.status || this.statusText\n            ? `[${[this.status, msg === this.statusText ? '' : this.statusText]\n                .filter(Boolean)\n                .join(' ')}] `\n            : '';\n        this.message = status + msg;\n        Object.setPrototypeOf(this, RestClientError.prototype);\n    }\n}\n\nfunction constructPageOptions(pageUrl, options) {\n    const url = new URL(pageUrl);\n    const searchParams = Object.fromEntries(url.searchParams);\n    const pageOptions = {\n        ...options,\n        ...searchParams\n    };\n    return pageOptions;\n}\nclass Paginator {\n    _paginatable;\n    _options;\n    _settings;\n    _page = null;\n    constructor(paginatable, options, settings) {\n        this._paginatable = paginatable;\n        this._options = options;\n        this._settings = settings;\n    }\n    updateOptions(options) {\n        this._options = {\n            ...this._options,\n            ...options\n        };\n        this._page = null;\n    }\n    hasNextPage() {\n        return !this._page || !!this._page.next;\n    }\n    hasPrevPage() {\n        return !!this._page && !!this._page.previous;\n    }\n    getCurrentPage() {\n        return this._page;\n    }\n    async next() {\n        if (!this._page) {\n            this._page = await this._paginatable(this._options, this._settings);\n            return this._page;\n        }\n        if (!this._page.next) {\n            return null;\n        }\n        const pageOptions = constructPageOptions(this._page.next, this._options);\n        this._page = await this._paginatable(pageOptions, this._settings);\n        return this._page;\n    }\n    async prev() {\n        if (!this._page || !this._page.previous) {\n            return null;\n        }\n        const pageOptions = constructPageOptions(this._page.previous, this._options);\n        this._page = await this._paginatable(pageOptions, this._settings);\n        return this._page;\n    }\n    generator() {\n        return paginate(this._paginatable)(this._options, this._settings);\n    }\n}\nfunction paginate(paginatable) {\n    return async function* (options, settings) {\n        let page = await paginatable(options, settings);\n        yield page;\n        while (page.next) {\n            const pageOptions = constructPageOptions(page.next, options);\n            page = await paginatable(pageOptions, settings);\n            yield page;\n        }\n    };\n}\n\nconst fetch = window.fetch;\nconst Headers = window.Headers;\nconst Request = window.Request;\n\nconst defaultSettings = {\n    apiBaseURL: 'https://api.uploadcare.com/',\n    retryThrottledRequestMaxTimes: 5,\n    retryNetworkErrorMaxTimes: 3\n};\nconst applyDefaultSettings = (userSettings) => {\n    const settings = {\n        ...defaultSettings,\n        ...userSettings\n    };\n    return settings;\n};\n\nvar version = '6.14.1';\n\nconst LIBRARY_NAME = 'UploadcareRestClient';\nconst LIBRARY_VERSION = version;\nfunction getUserAgent(options) {\n    return getUserAgent$1({\n        libraryName: LIBRARY_NAME,\n        libraryVersion: LIBRARY_VERSION,\n        ...options\n    });\n}\n\nconst THROTTLED_STATUS = 429;\nconst DEFAULT_RETRY_AFTER_TIMEOUT = 15000;\nconst DEFAULT_NETWORK_ERROR_TIMEOUT = 1000;\nfunction getTimeoutFromThrottledRequest(response) {\n    const { headers } = response;\n    if (!headers || !headers.get('retry-after')) {\n        return DEFAULT_RETRY_AFTER_TIMEOUT;\n    }\n    const seconds = parseInt(headers.get('retry-after'), 10);\n    if (!Number.isFinite(seconds)) {\n        return DEFAULT_RETRY_AFTER_TIMEOUT;\n    }\n    return seconds * 1000;\n}\nfunction retryIfFailed(fn, options) {\n    return retrier(({ attempt, retry }) => fn()\n        .then(async (response) => {\n        if (response.status !== THROTTLED_STATUS) {\n            return response;\n        }\n        if (attempt < options.retryThrottledRequestMaxTimes) {\n            return retry(getTimeoutFromThrottledRequest(response));\n        }\n        const json = await response.json();\n        const { detail } = json;\n        throw new RestClientError(detail, { response });\n    })\n        .catch((error) => {\n        if (attempt < options.retryNetworkErrorMaxTimes) {\n            return retry((attempt + 1) * DEFAULT_NETWORK_ERROR_TIMEOUT);\n        }\n        throw error;\n    }));\n}\n\nfunction normalizeQuery(input) {\n    const output = {};\n    for (const [key, value] of Object.entries(input)) {\n        if (value === undefined || value === null) {\n            continue;\n        }\n        if (value instanceof Date) {\n            output[key] = value.toISOString();\n        }\n        else {\n            output[key] = value.toString();\n        }\n    }\n    return output;\n}\nfunction getRequestURL(path, query, apiBaseURL) {\n    const url = new URL(apiBaseURL);\n    const searchParams = new URLSearchParams(query && normalizeQuery(query));\n    url.pathname = path;\n    url.search = searchParams.toString();\n    return url.toString();\n}\nasync function makeApiRequest(options, userSettings) {\n    const { method, path, query, body } = options;\n    const settings = applyDefaultSettings(userSettings);\n    if (!settings.authSchema) {\n        throw new RestClientError('authSchema is required');\n    }\n    const url = getRequestURL(path, query, settings.apiBaseURL);\n    const requestBody = body && JSON.stringify(body);\n    const unsignedRequest = new Request(url, {\n        method: method,\n        body: requestBody,\n        headers: new Headers({\n            'Content-Type': 'application/json',\n            'User-Agent': getUserAgent({\n                publicKey: settings.authSchema.publicKey,\n                integration: settings.integration,\n                userAgent: settings.userAgent\n            })\n        })\n    });\n    const requestHeaders = await settings.authSchema.getHeaders(unsignedRequest);\n    const signedRequest = new Request(url, {\n        method: method,\n        body: requestBody,\n        headers: requestHeaders\n    });\n    const response = await retryIfFailed(() => fetch(signedRequest), {\n        retryThrottledRequestMaxTimes: settings.retryThrottledRequestMaxTimes,\n        retryNetworkErrorMaxTimes: settings.retryNetworkErrorMaxTimes\n    });\n    return {\n        request: signedRequest,\n        response\n    };\n}\n\nconst DEFAULT_API_VERSION = '0.7';\nconst getAcceptHeader = () => {\n    return `application/vnd.uploadcare-v${DEFAULT_API_VERSION}+json`;\n};\n\nconst CAMELIZE_IGNORE_KEYS = ['metadata', 'problems', 'appdata'];\nconst NO_CONTENT_STATUS = 204;\nconst isJsonContentType = (type) => type && ['application/json', getAcceptHeader()].includes(type);\nasync function handleApiRequest(options) {\n    const { apiRequest, okCodes, camelize = true } = options;\n    const { request, response } = apiRequest;\n    if (response.status === NO_CONTENT_STATUS) {\n        return undefined;\n    }\n    if (!isJsonContentType(response.headers.get('content-type'))) {\n        throw new RestClientError(undefined, {\n            response,\n            request\n        });\n    }\n    const json = await response.json();\n    if (!okCodes.includes(response.status)) {\n        throw new RestClientError(json.detail, {\n            response,\n            request\n        });\n    }\n    if (!camelize) {\n        return json;\n    }\n    return camelizeKeys(json, {\n        ignoreKeys: CAMELIZE_IGNORE_KEYS\n    });\n}\n\nasync function addonExecutionStatus(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/addons/${options.addonName}/execute/status/`,\n        query: {\n            request_id: options.requestId\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function executeAddon(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'POST',\n        path: `/addons/${options.addonName}/execute/`,\n        body: {\n            target: options.target,\n            params: options.params\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function fileInfo(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/files/${options.uuid}/`,\n        query: {\n            include: options.include\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nvar PollStrategyJobStatus;\n(function (PollStrategyJobStatus) {\n    PollStrategyJobStatus[PollStrategyJobStatus[\"FINISHED\"] = 0] = \"FINISHED\";\n    PollStrategyJobStatus[PollStrategyJobStatus[\"FAILED\"] = 1] = \"FAILED\";\n})(PollStrategyJobStatus || (PollStrategyJobStatus = {}));\nfunction createPollStrategy({ getJobStatus, job, isJobFailed, isJobFinished }) {\n    return async () => {\n        const statusResponse = await getJobStatus(job);\n        if (isJobFinished(statusResponse)) {\n            return { status: PollStrategyJobStatus.FINISHED, statusResponse };\n        }\n        else if (isJobFailed(statusResponse)) {\n            return { status: PollStrategyJobStatus.FAILED, statusResponse };\n        }\n        return false;\n    };\n}\nfunction createJobPoller(options) {\n    const { runner, resolveJobs, getJobStatus, isJobFinished, isJobFailed, getResult, getError } = options;\n    return async (options, runnerSettings) => {\n        // TODO: add default timeout and inerval\n        const { pollOptions, ...runnerOptions } = options;\n        const response = await runner(runnerOptions, runnerSettings);\n        const jobs = resolveJobs(response, runnerOptions, runnerSettings);\n        if (pollOptions?.signal?.aborted) {\n            throw new CancelError();\n        }\n        const promises = jobs.map(async (job) => {\n            const pollStrategy = createPollStrategy({\n                getJobStatus,\n                job,\n                isJobFailed,\n                isJobFinished\n            });\n            const pollResult = await poll({\n                check: pollStrategy,\n                signal: pollOptions?.signal,\n                interval: pollOptions?.interval,\n                timeout: pollOptions?.timeout\n            });\n            if (pollResult.status === PollStrategyJobStatus.FINISHED) {\n                const result = await getResult(job, pollResult.statusResponse);\n                return result;\n            }\n            const error = await getError(job, pollResult.statusResponse);\n            return error;\n        });\n        return promises;\n    };\n}\n\nconst addonJobPoller = async (options, settings) => {\n    const { onRun, onStatus, ...pollerOptions } = options;\n    const poller = createJobPoller({\n        runner: executeAddon,\n        resolveJobs: (response, runnerOptions, runnerSettings) => {\n            onRun && onRun(response);\n            return [\n                {\n                    target: runnerOptions.target,\n                    requestId: response.requestId,\n                    addonName: runnerOptions.addonName,\n                    runnerSettings\n                }\n            ];\n        },\n        getJobStatus: async (job) => {\n            const response = await addonExecutionStatus({\n                addonName: job.addonName,\n                requestId: job.requestId\n            }, job.runnerSettings);\n            onStatus && onStatus(response);\n            return response;\n        },\n        isJobFinished: (statusResponse) => statusResponse.status === AddonExecutionStatus.DONE,\n        // TODO: handle unknown status\n        isJobFailed: (statusResponse) => statusResponse.status === AddonExecutionStatus.ERROR,\n        getResult: async (job) => {\n            const info = await fileInfo({ uuid: job.target, include: 'appdata' }, job.runnerSettings);\n            const appdata = info.appdata;\n            const addonData = appdata[job.addonName];\n            return {\n                error: false,\n                result: addonData\n            };\n        },\n        getError: async () => ({\n            error: true,\n            result: null\n        })\n    });\n    const promises = await poller(pollerOptions, settings);\n    return promises[0];\n};\n\nasync function conversionJobStatus(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/convert/${options.type}/status/${options.token}/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nconst storeValueToString = (store) => {\n    if (typeof store === 'boolean') {\n        return store ? 'true' : 'false';\n    }\n    if (!store || store === 'auto') {\n        return undefined;\n    }\n    throw new RestClientError('Invalid `store` option value. Expected `true`, `false` our `\"auto\"`');\n};\n\nasync function convert(options, userSettings) {\n    const isDocument = options.type === ConversionType.DOCUMENT;\n    const body = {\n        paths: options.paths,\n        store: storeValueToString(options.store)\n    };\n    if (isDocument) {\n        body['save_in_group'] = options?.saveInGroup?.toString();\n    }\n    const apiRequest = await makeApiRequest({\n        method: 'POST',\n        path: `/convert/${options.type}/`,\n        body\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nconst conversionJobPoller = (options, settings) => {\n    const { onRun, onStatus, ...rest } = options;\n    const pollerOptions = rest;\n    const poller = createJobPoller({\n        runner: (convert),\n        resolveJobs: (response, runnerOptions, runnerSettings) => {\n            onRun && onRun(response);\n            return runnerOptions.paths.map((path) => {\n                const problem = response.problems[path];\n                if (problem) {\n                    return {\n                        hasProblem: true,\n                        type: runnerOptions.type,\n                        path,\n                        problem,\n                        runnerSettings\n                    };\n                }\n                const result = response.result.find((r) => r.originalSource === path);\n                return {\n                    hasProblem: false,\n                    type: runnerOptions.type,\n                    path,\n                    token: result.token,\n                    result,\n                    runnerSettings\n                };\n            });\n        },\n        getJobStatus: async (job) => {\n            let status;\n            if (job.hasProblem) {\n                status = {\n                    path: job.path,\n                    status: ConversionStatus.FAILED,\n                    error: job.problem,\n                    result: null\n                };\n            }\n            else {\n                const statusResponse = await conversionJobStatus({ type: job.type, token: job.token }, job.runnerSettings);\n                status = {\n                    path: job.path,\n                    ...statusResponse\n                };\n            }\n            onStatus && onStatus(status);\n            return status;\n        },\n        isJobFinished: (statusResponse) => statusResponse.status === ConversionStatus.FINISHED,\n        isJobFailed: (statusResponse) => statusResponse.status === ConversionStatus.FAILED ||\n            statusResponse.status === ConversionStatus.CANCELLED,\n        getResult: async (job, statusResponse) => statusResponse,\n        getError: async (job, statusResponse) => statusResponse\n    });\n    return poller(pollerOptions, settings);\n};\n\nconst createSignature = (...args) => {\n    return import('./createSignature.browser.b4bcb7f3.mjs').then((m) => m.createSignature(...args));\n};\n\nfunction hasSignatureResolver(options) {\n    return !!options\n        .signatureResolver;\n}\nfunction hasSecretKey(options) {\n    return !!options.secretKey;\n}\nclass UploadcareAuthSchema {\n    _publicKey;\n    _signatureResolver;\n    _md5Loader;\n    constructor(options) {\n        if (hasSecretKey(options)) {\n            if (!isNode()) {\n                console.warn(`Seems that you're using the secret key on the client-side. We're hope you know what you're doing.`);\n            }\n            this._signatureResolver = (signString) => createSignature(options.secretKey, signString);\n        }\n        else if (hasSignatureResolver(options)) {\n            this._signatureResolver = options.signatureResolver;\n        }\n        else {\n            throw new RestClientError(`Please, provide either 'secretKey' or 'signatureResolver'`);\n        }\n        const { publicKey, md5Loader } = options;\n        this._publicKey = publicKey;\n        if (md5Loader) {\n            this._md5Loader = md5Loader();\n        }\n        else {\n            this._md5Loader = import('./md5.browser.c389165d.mjs').then((m) => m.md5);\n        }\n    }\n    async md5(input) {\n        const md5 = await this._md5Loader;\n        return md5(input);\n    }\n    getSignString(params) {\n        return [\n            params.method,\n            params.contentHash,\n            params.contentType,\n            params.date,\n            params.uri\n        ].join('\\n');\n    }\n    get publicKey() {\n        return this._publicKey;\n    }\n    async getHeaders(request) {\n        const body = await request.text();\n        const contentHash = await this.md5(body || '');\n        const date = new Date().toUTCString();\n        const url = new URL(request.url);\n        const uri = url.pathname + url.search + url.hash;\n        const signString = this.getSignString({\n            contentType: request.headers.get('Content-Type') || '',\n            method: request.method,\n            contentHash,\n            date,\n            uri\n        });\n        const signature = await this._signatureResolver(signString);\n        const headers = new Headers({\n            ...Object.fromEntries(request.headers.entries()),\n            'X-Uploadcare-Date': date,\n            Accept: getAcceptHeader(),\n            Authorization: `Uploadcare ${this._publicKey}:${signature}`\n        });\n        return headers;\n    }\n}\n\nclass UploadcareSimpleAuthSchema {\n    _publicKey;\n    _secretKey;\n    constructor({ publicKey, secretKey }) {\n        this._publicKey = publicKey;\n        this._secretKey = secretKey;\n        if (secretKey && !isNode()) {\n            console.warn(`Seems that you're using the secret key on the client-side. We're hope you know that you're doing.`);\n        }\n    }\n    get publicKey() {\n        return this._publicKey;\n    }\n    async getHeaders(request) {\n        return new Headers({\n            ...Object.fromEntries(request.headers.entries()),\n            Accept: getAcceptHeader(),\n            Authorization: `Uploadcare.Simple ${this._publicKey}:${this._secretKey}`\n        });\n    }\n}\n\nasync function copyFileToLocalStorage(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'POST',\n        path: `/files/local_copy/`,\n        body: {\n            source: options.source,\n            store: options.store,\n            metadata: options.metadata\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [201] });\n}\n\nasync function copyFileToRemoteStorage(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'POST',\n        path: `/files/remote_copy/`,\n        body: {\n            source: options.source,\n            target: options.target,\n            make_public: options.makePublic,\n            pattern: options.pattern\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200, 201] });\n}\n\nasync function deleteFile(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'DELETE',\n        path: `/files/${options.uuid}/storage/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function deleteFiles(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'DELETE',\n        path: `/files/storage/`,\n        body: options.uuids\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function listOfFiles(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: '/files/',\n        query: {\n            from: options.from,\n            removed: options.removed,\n            stored: options.stored,\n            limit: options.limit,\n            ordering: options.ordering\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function storeFile(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'PUT',\n        path: `/files/${options.uuid}/storage/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function storeFiles(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'PUT',\n        path: `/files/storage/`,\n        body: options.uuids\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function deleteGroup(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'DELETE',\n        path: `/groups/${options.uuid}/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [204] });\n}\n\nasync function groupInfo(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/groups/${options.uuid}/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function listOfGroups(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: '/groups/',\n        query: {\n            from: options.from,\n            limit: options.limit,\n            ordering: options.ordering\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function deleteMetadata(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'DELETE',\n        path: `/files/${options.uuid}/metadata/${options.key}/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [204] });\n}\n\nasync function getMetadata(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/files/${options.uuid}/metadata/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200], camelize: false });\n}\n\nasync function getMetadataValue(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/files/${options.uuid}/metadata/${options.key}/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function updateMetadata(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'PUT',\n        path: `/files/${options.uuid}/metadata/${options.key}/`,\n        body: options.value\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200, 201] });\n}\n\nasync function createWebhook(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'POST',\n        path: `/webhooks/`,\n        body: {\n            target_url: options.targetUrl,\n            event: options.event,\n            is_active: options.isActive,\n            signing_secret: options.signingSecret\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [201] });\n}\n\nasync function deleteWebhook(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'DELETE',\n        path: `/webhooks/unsubscribe/`,\n        body: {\n            target_url: options.targetUrl\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [204] });\n}\n\nasync function listOfWebhooks(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/webhooks/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function updateWebhook(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'PUT',\n        path: `/webhooks/${options.id}/`,\n        body: {\n            target_url: options.targetUrl,\n            event: options.event,\n            is_active: options.isActive,\n            signing_secret: options.signingSecret\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function conversionInfo(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/convert/document/${options.uuid}/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nexport { AddonExecutionStatus, AddonName, BatchResponseStatus, CancelError, ConversionStatus, ConversionType, Paginator, RestClientError, UploadcareAuthSchema, UploadcareError, UploadcareSimpleAuthSchema, WebhookEvent, addonExecutionStatus, addonJobPoller, conversionInfo, conversionJobPoller, conversionJobStatus, convert, copyFileToLocalStorage, copyFileToRemoteStorage, createSignature, createWebhook, deleteFile, deleteFiles, deleteGroup, deleteMetadata, deleteWebhook, executeAddon, fileInfo, getMetadata, getMetadataValue, getUserAgent$1 as getUserAgent, groupInfo, listOfFiles, listOfGroups, listOfWebhooks, paginate, storeFile, storeFiles, updateMetadata, updateWebhook };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}