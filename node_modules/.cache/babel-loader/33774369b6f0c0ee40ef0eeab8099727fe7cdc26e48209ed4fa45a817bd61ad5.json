{"ast":null,"code":"import * as Realm from \"realm-web\";\nconst MongoDbModel = {\n  getAllUsers: async function getAllUsers() {\n    const REALM_APP_ID = process.env.REACT_APP_REALM_ID;\n    const app = new Realm.App({\n      id: REALM_APP_ID\n    });\n    const cred = Realm.Credentials.anonymous();\n    try {\n      const user = await app.logIn(cred);\n      const response = await user.functions.getAllUsers();\n      console.log(response);\n      //const allUsers = response.json();\n\n      return response;\n    } catch (error) {\n      console.error(error);\n    }\n  },\n  getOneUser: async function getOneUser(userN) {\n    const REALM_APP_ID = process.env.REACT_APP_REALM_ID;\n    const app = new Realm.App({\n      id: REALM_APP_ID\n    });\n    const cred = Realm.Credentials.anonymous();\n    try {\n      console.log(userN);\n      const user = await app.logIn(cred);\n      const response = await user.functions.getOneUser(userN);\n      console.log(response);\n      return response;\n    } catch (error) {\n      console.error(error);\n    }\n  },\n  registerUser: async function registerUser(userN, passw, email) {\n    const REALM_APP_ID = process.env.REACT_APP_REALM_ID;\n    const app = new Realm.App({\n      id: REALM_APP_ID\n    });\n    const cred = Realm.Credentials.anonymous();\n    try {\n      const user = await app.logIn(cred);\n      const response = await user.functions.registerUser({\n        email: email,\n        username: userN,\n        password: passw\n      });\n      return response;\n    } catch (error) {\n      console.error(error);\n    }\n  },\n  loginUser: async function loginUser(userN, passw) {\n    const REALM_APP_ID = process.env.REACT_APP_REALM_ID;\n    const app = new Realm.App({\n      id: REALM_APP_ID\n    });\n    const cred = Realm.Credentials.anonymous();\n    try {\n      const user = await app.logIn(cred);\n      const response = await user.functions.loginUser({\n        username: userN,\n        password: passw\n      });\n      return response;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n};\nexport default MongoDbModel;","map":{"version":3,"names":["Realm","MongoDbModel","getAllUsers","REALM_APP_ID","process","env","REACT_APP_REALM_ID","app","App","id","cred","Credentials","anonymous","user","logIn","response","functions","console","log","error","getOneUser","userN","registerUser","passw","email","username","password","loginUser"],"sources":["/home/elias/self-projects/game-platform-website/src/models/mongodb.js"],"sourcesContent":["import * as Realm from \"realm-web\";\n\nconst MongoDbModel = {\n\n    getAllUsers: async function getAllUsers() {\n        const REALM_APP_ID = process.env.REACT_APP_REALM_ID;\n        const app = new Realm.App({ id: REALM_APP_ID });\n        const cred = Realm.Credentials.anonymous();\n        try {\n        const user = await app.logIn(cred);\n        const response = await user.functions.getAllUsers();\n        console.log(response);\n        //const allUsers = response.json();\n\n        return response;\n\n        } catch (error) {\n        console.error(error);\n        }\n    },\n\n    getOneUser: async function getOneUser(userN) {\n        const REALM_APP_ID = process.env.REACT_APP_REALM_ID;\n        const app = new Realm.App({ id: REALM_APP_ID });\n        const cred = Realm.Credentials.anonymous();\n        try {\n            console.log(userN);\n            const user = await app.logIn(cred);\n            const response = await user.functions.getOneUser(userN);\n            console.log(response);\n            return response;\n        } catch (error) {\n            console.error(error);\n        }\n    },\n\n    registerUser: async function registerUser(userN, passw, email) {\n        const REALM_APP_ID = process.env.REACT_APP_REALM_ID;\n        const app = new Realm.App({ id: REALM_APP_ID });\n        const cred = Realm.Credentials.anonymous();\n        try {\n            const user = await app.logIn(cred);\n            const response = await user.functions.registerUser({\n                email: email, \n                username: userN, \n                password: passw\n            });\n\n            return response;\n        } catch (error) {\n            console.error(error);\n        }\n    },\n\n    loginUser: async function loginUser(userN, passw) {\n        const REALM_APP_ID = process.env.REACT_APP_REALM_ID;\n        const app = new Realm.App({ id: REALM_APP_ID });\n        const cred = Realm.Credentials.anonymous();\n        try {\n            const user = await app.logIn(cred);\n            const response = await user.functions.loginUser({ \n                username: userN, \n                password: passw\n            });\n\n            return response;\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n};\n\nexport default MongoDbModel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}