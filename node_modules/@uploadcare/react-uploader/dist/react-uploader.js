import a, { Suspense as y, useState as B, useEffect as R, useMemo as f } from "react";
import * as i from "@uploadcare/blocks";
import { UploadCtxProvider as q, defineLocale as z } from "@uploadcare/blocks";
const b = /* @__PURE__ */ new Set([
  "children",
  "ref",
  "style",
  "className"
]), O = (e = {}) => Object == null ? void 0 : Object.keys(e).reduce((t, o) => {
  var s, n;
  const r = e == null ? void 0 : e[o], l = `on${(n = (s = r == null ? void 0 : r.split("-")) == null ? void 0 : s.map((c) => c.charAt(0).toUpperCase() + c.slice(1))) == null ? void 0 : n.join("")}`;
  return t[l] = r, t;
}, {}), h = /* @__PURE__ */ new WeakMap(), T = (e) => {
  let t = h.get(e);
  return t === void 0 && (t = /* @__PURE__ */ new Map(), h.set(e, t)), t;
}, x = ({
  node: e,
  nameProp: t,
  valueProp: o,
  prevValueProp: s,
  event: n
}) => {
  if (n !== void 0) {
    if (o !== s) {
      const r = T(e), l = r.has(n);
      let c = r.get(n);
      o !== void 0 ? l ? c.handleEvent = o : (c = { handleEvent: o }, r.set(n, c), e.addEventListener(
        n,
        (d) => c.handleEvent(d.detail)
      )) : l && (r.delete(n), e.removeEventListener(n, c));
    }
    return;
  }
  e[t] = o, o == null && t in HTMLElement.prototype && e.removeAttribute(t);
}, j = (e, t, o) => {
  const s = {}, n = {};
  return Object.entries(e).forEach(([r, l]) => {
    b.has(r) ? s[r === "className" ? "class" : r] = l : t.has(r) || r in o.prototype ? n[r] = l : s[r] = l;
  }), { reactProps: s, customElProps: n };
}, v = ({
  react: e,
  // https://react.dev/warnings/invalid-hook-call-warning
  tag: t,
  elClass: o,
  schemaEvents: s
}) => {
  const n = O(s), r = new Set(Object.keys(n ?? {})), l = e.forwardRef(
    (c, d) => {
      const u = e.useRef(/* @__PURE__ */ new Map()), E = e.useRef(null), { reactProps: I, customElProps: M } = j(c, r, o);
      return e.useLayoutEffect(() => {
        if (E.current === null)
          return;
        const m = /* @__PURE__ */ new Map();
        for (const p in M)
          x({
            node: E.current,
            nameProp: p,
            valueProp: M[p],
            prevValueProp: u.current.get(p),
            event: n[p]
          }), u.current.delete(p), m.set(p, c[p]);
        for (const [p, F] of u.current)
          x({
            node: E.current,
            nameProp: p,
            valueProp: void 0,
            prevValueProp: F,
            event: n[p]
          });
        u.current = m;
      }), e.createElement(t ?? o.__tag, {
        ...I,
        ref: e.useCallback(
          (m) => {
            E.current = m, typeof d == "function" ? d(m) : d !== null && (d.current = m);
          },
          [d]
        )
      });
    }
  );
  return l.displayName = o.name, l;
}, g = v({
  react: a,
  tag: "lr-config",
  elClass: i.Config
}), P = v({
  react: a,
  tag: "lr-upload-ctx-provider",
  elClass: i.UploadCtxProvider,
  schemaEvents: i.UploadCtxProvider.EventType
}), C = (e) => {
  const t = {}, o = {};
  return Object.entries(e).forEach(([s, n]) => {
    s.startsWith("on") ? t[s] = n : o[s] = n;
  }), {
    eventHandlers: t,
    config: o
  };
}, L = "0.4.0", N = "React-Uploader", U = () => `${N}/${L}`, w = ({ condition: e, fallback: t, children: o, ...s }) => e ? /* @__PURE__ */ a.createElement(y, { fallback: t, ...s }, o) : /* @__PURE__ */ a.createElement(a.Fragment, null, t), A = () => {
  const [e, t] = B(!1);
  return R(() => {
    typeof window < "u" && t(!0);
  }, []), e;
};
i.registerBlocks(i);
const _ = v({
  react: a,
  tag: "lr-file-uploader-regular",
  elClass: i.FileUploaderRegular
}), X = ({
  ctxName: e,
  className: t,
  classNameUploader: o,
  apiRef: s,
  fallback: n,
  ...r
}) => {
  const l = f(() => e ?? i.UID.generate(), [e]), { eventHandlers: c, config: d } = f(
    () => C(r),
    [r]
  ), u = A();
  return /* @__PURE__ */ a.createElement(w, { condition: u, fallback: n }, /* @__PURE__ */ a.createElement("div", { className: t }, /* @__PURE__ */ a.createElement(g, { userAgentIntegration: U(), "ctx-name": l, ...d }), /* @__PURE__ */ a.createElement(
    P,
    {
      ref: s,
      "ctx-name": l,
      ...c
    }
  ), /* @__PURE__ */ a.createElement(_, { class: o, "ctx-name": l })));
};
i.registerBlocks(i);
const H = v({
  react: a,
  tag: "lr-file-uploader-minimal",
  elClass: i.FileUploaderMinimal
}), D = ({
  ctxName: e,
  className: t,
  classNameUploader: o,
  apiRef: s,
  fallback: n,
  ...r
}) => {
  const l = f(() => e ?? i.UID.generate(), [e]), { eventHandlers: c, config: d } = f(
    () => C(r),
    [r]
  ), u = A();
  return /* @__PURE__ */ a.createElement(w, { condition: u, fallback: n }, /* @__PURE__ */ a.createElement("div", { className: t }, /* @__PURE__ */ a.createElement(g, { userAgentIntegration: U(), "ctx-name": l, ...d }), /* @__PURE__ */ a.createElement(
    P,
    {
      ref: s,
      "ctx-name": l,
      ...c
    }
  ), /* @__PURE__ */ a.createElement(H, { class: o, "ctx-name": l })));
};
i.registerBlocks(i);
const S = v({
  react: a,
  tag: "lr-file-uploader-inline",
  elClass: i.FileUploaderMinimal
}), V = ({
  ctxName: e,
  className: t,
  classNameUploader: o,
  apiRef: s,
  fallback: n,
  ...r
}) => {
  const l = f(() => e ?? i.UID.generate(), [e]), { eventHandlers: c, config: d } = f(
    () => C(r),
    [r]
  ), u = A();
  return /* @__PURE__ */ a.createElement(w, { condition: u, fallback: n }, /* @__PURE__ */ a.createElement("div", { className: t }, /* @__PURE__ */ a.createElement(g, { userAgentIntegration: U(), "ctx-name": l, ...d }), /* @__PURE__ */ a.createElement(
    P,
    {
      ref: s,
      "ctx-name": l,
      ...c
    }
  ), /* @__PURE__ */ a.createElement(S, { class: o, "ctx-name": l })));
};
export {
  V as FileUploaderInline,
  D as FileUploaderMinimal,
  X as FileUploaderRegular,
  q as UploadCtxProvider,
  z as defineLocale
};
